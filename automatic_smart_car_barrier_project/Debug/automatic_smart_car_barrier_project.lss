
automatic_smart_car_barrier_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000009e4  00000a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800062  00800062  00000a7a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  000011d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c44  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000308  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000771  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000332  00000000  00000000  00002b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000586  00000000  00000000  00002e5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int main(void)
{
	
		
		DIO_vsetpindir('D',5,1);//output servo motor
  92:	84 e4       	ldi	r24, 0x44	; 68
  94:	65 e0       	ldi	r22, 0x05	; 5
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_vsetpindir>
		DIO_vsetpindir('D',7,1);//tr--- PD6 echo
  9c:	84 e4       	ldi	r24, 0x44	; 68
  9e:	67 e0       	ldi	r22, 0x07	; 7
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_vsetpindir>
	motor_vinti();
  a6:	0e 94 3e 04 	call	0x87c	; 0x87c <motor_vinti>
    {
        //TODO:: Please write your application code 
			
		
		TCCR1A = 0;
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
  aa:	c0 e2       	ldi	r28, 0x20	; 32
		DIO_vwrite('D',7,1);
		_delay_us(50);
		DIO_vwrite('D',7,0);
		
		TCCR1B = 0xc1;  	/* Rising edge, no prescaler , noise canceler*/
  ac:	d1 ec       	ldi	r29, 0xC1	; 193
		while ((TIFR&(1<<ICF1)) == 0);
		a = ICR1;  		/* Take value of capture register */
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
		TCCR1B = 0x81;  	/* Falling edge, no prescaler ,noise canceler*/
  ae:	0f 2e       	mov	r0, r31
  b0:	f1 e8       	ldi	r31, 0x81	; 129
  b2:	bf 2e       	mov	r11, r31
  b4:	f0 2d       	mov	r31, r0
		b = ICR1;  		/* Take value of capture register */
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
		TCNT1=0;
		TCCR1B = 0;  		/* Stop the timer */
		high=b-a;
		distance=((high*34600)/(F_CPU*2)) ;
  b6:	0f 2e       	mov	r0, r31
  b8:	f0 e8       	ldi	r31, 0x80	; 128
  ba:	cf 2e       	mov	r12, r31
  bc:	f4 e8       	ldi	r31, 0x84	; 132
  be:	df 2e       	mov	r13, r31
  c0:	fe e1       	ldi	r31, 0x1E	; 30
  c2:	ef 2e       	mov	r14, r31
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	ff 2e       	mov	r15, r31
  c8:	f0 2d       	mov	r31, r0
    while(1)
    {
        //TODO:: Please write your application code 
			
		
		TCCR1A = 0;
  ca:	1f bc       	out	0x2f, r1	; 47
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
  cc:	c8 bf       	out	0x38, r28	; 56
		DIO_vwrite('D',7,1);
  ce:	84 e4       	ldi	r24, 0x44	; 68
  d0:	67 e0       	ldi	r22, 0x07	; 7
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x48>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x4e>
		_delay_us(50);
		DIO_vwrite('D',7,0);
  e0:	84 e4       	ldi	r24, 0x44	; 68
  e2:	67 e0       	ldi	r22, 0x07	; 7
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
		
		TCCR1B = 0xc1;  	/* Rising edge, no prescaler , noise canceler*/
  ea:	de bd       	out	0x2e, r29	; 46
		while ((TIFR&(1<<ICF1)) == 0);
  ec:	08 b6       	in	r0, 0x38	; 56
  ee:	05 fe       	sbrs	r0, 5
  f0:	fd cf       	rjmp	.-6      	; 0xec <main+0x5a>
		a = ICR1;  		/* Take value of capture register */
  f2:	86 b5       	in	r24, 0x26	; 38
  f4:	97 b5       	in	r25, 0x27	; 39
  f6:	90 93 6d 00 	sts	0x006D, r25
  fa:	80 93 6c 00 	sts	0x006C, r24
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
  fe:	c8 bf       	out	0x38, r28	; 56
		TCCR1B = 0x81;  	/* Falling edge, no prescaler ,noise canceler*/
 100:	be bc       	out	0x2e, r11	; 46
		while ((TIFR&(1<<ICF1)) == 0);
 102:	08 b6       	in	r0, 0x38	; 56
 104:	05 fe       	sbrs	r0, 5
 106:	fd cf       	rjmp	.-6      	; 0x102 <main+0x70>
		b = ICR1;  		/* Take value of capture register */
 108:	66 b5       	in	r22, 0x26	; 38
 10a:	77 b5       	in	r23, 0x27	; 39
 10c:	70 93 67 00 	sts	0x0067, r23
 110:	60 93 66 00 	sts	0x0066, r22
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
 114:	c8 bf       	out	0x38, r28	; 56
		TCNT1=0;
 116:	1d bc       	out	0x2d, r1	; 45
 118:	1c bc       	out	0x2c, r1	; 44
		TCCR1B = 0;  		/* Stop the timer */
 11a:	1e bc       	out	0x2e, r1	; 46
		high=b-a;
 11c:	80 91 6c 00 	lds	r24, 0x006C
 120:	90 91 6d 00 	lds	r25, 0x006D
 124:	68 1b       	sub	r22, r24
 126:	79 0b       	sbc	r23, r25
 128:	70 93 6b 00 	sts	0x006B, r23
 12c:	60 93 6a 00 	sts	0x006A, r22
		distance=((high*34600)/(F_CPU*2)) ;
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	28 e2       	ldi	r18, 0x28	; 40
 136:	37 e8       	ldi	r19, 0x87	; 135
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	0e 94 af 04 	call	0x95e	; 0x95e <__mulsi3>
 140:	a7 01       	movw	r20, r14
 142:	96 01       	movw	r18, r12
 144:	0e 94 ce 04 	call	0x99c	; 0x99c <__udivmodsi4>
 148:	89 01       	movw	r16, r18
 14a:	9a 01       	movw	r18, r20
 14c:	10 93 69 00 	sts	0x0069, r17
 150:	00 93 68 00 	sts	0x0068, r16
		
		//no object
		SET_BIT(PORTD,5);
 154:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	a6 e7       	ldi	r26, 0x76	; 118
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	11 97       	sbiw	r26, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0xc8>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0xce>
 160:	00 00       	nop
		_delay_ms(1.5);
		CLR_BIT(PORTD,5);
 162:	95 98       	cbi	0x12, 5	; 18
		
		while(distance>20){
 164:	05 31       	cpi	r16, 0x15	; 21
 166:	11 05       	cpc	r17, r1
 168:	48 f0       	brcs	.+18     	; 0x17c <main+0xea>
			motor_forword(); 
 16a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <motor_forword>
		//no object
		SET_BIT(PORTD,5);
		_delay_ms(1.5);
		CLR_BIT(PORTD,5);
		
		while(distance>20){
 16e:	80 91 68 00 	lds	r24, 0x0068
 172:	90 91 69 00 	lds	r25, 0x0069
 176:	85 31       	cpi	r24, 0x15	; 21
 178:	91 05       	cpc	r25, r1
 17a:	b8 f7       	brcc	.-18     	; 0x16a <main+0xd8>
			motor_forword(); 
		}
stop_motor();
 17c:	0e 94 86 04 	call	0x90c	; 0x90c <stop_motor>
		
		
			//object  servo motor
			SET_BIT(PORTD,5); //right
 180:	95 9a       	sbi	0x12, 5	; 18
 182:	89 ef       	ldi	r24, 0xF9	; 249
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0xf4>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0xfa>
 18c:	00 00       	nop
			_delay_ms(1);
			CLR_BIT(PORTD,5);
 18e:	95 98       	cbi	0x12, 5	; 18
 190:	8f e9       	ldi	r24, 0x9F	; 159
 192:	96 e8       	ldi	r25, 0x86	; 134
 194:	a1 e0       	ldi	r26, 0x01	; 1
 196:	81 50       	subi	r24, 0x01	; 1
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	a0 40       	sbci	r26, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x104>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x10e>
 1a0:	00 00       	nop
			_delay_ms(500);
			right_distance=((high*34600)/(F_CPU*2)) ;
 1a2:	60 91 6a 00 	lds	r22, 0x006A
 1a6:	70 91 6b 00 	lds	r23, 0x006B
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	28 e2       	ldi	r18, 0x28	; 40
 1b0:	37 e8       	ldi	r19, 0x87	; 135
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	0e 94 af 04 	call	0x95e	; 0x95e <__mulsi3>
 1ba:	a7 01       	movw	r20, r14
 1bc:	96 01       	movw	r18, r12
 1be:	0e 94 ce 04 	call	0x99c	; 0x99c <__udivmodsi4>
 1c2:	89 01       	movw	r16, r18
 1c4:	9a 01       	movw	r18, r20
 1c6:	10 93 65 00 	sts	0x0065, r17
 1ca:	00 93 64 00 	sts	0x0064, r16
			
			
			SET_BIT(PORTD,5);//left
 1ce:	95 9a       	sbi	0x12, 5	; 18
 1d0:	a3 ef       	ldi	r26, 0xF3	; 243
 1d2:	b1 e0       	ldi	r27, 0x01	; 1
 1d4:	11 97       	sbiw	r26, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <main+0x142>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x148>
 1da:	00 00       	nop
			_delay_ms(2);
			CLR_BIT(PORTD,5);
 1dc:	95 98       	cbi	0x12, 5	; 18
 1de:	8f e9       	ldi	r24, 0x9F	; 159
 1e0:	96 e8       	ldi	r25, 0x86	; 134
 1e2:	a1 e0       	ldi	r26, 0x01	; 1
 1e4:	81 50       	subi	r24, 0x01	; 1
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	a0 40       	sbci	r26, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x152>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x15c>
 1ee:	00 00       	nop
			_delay_ms(500);
			left_distance=((high*34600)/(F_CPU*2)) ;
 1f0:	10 93 63 00 	sts	0x0063, r17
 1f4:	00 93 62 00 	sts	0x0062, r16
			
	
			if (right_distance>=left_distance)
			{
				turn_right();
 1f8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <turn_right>
 1fc:	8f ed       	ldi	r24, 0xDF	; 223
 1fe:	98 e2       	ldi	r25, 0x28	; 40
 200:	a1 e0       	ldi	r26, 0x01	; 1
 202:	81 50       	subi	r24, 0x01	; 1
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	a0 40       	sbci	r26, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0x170>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0x17a>
 20c:	00 00       	nop
				_delay_ms(380);
				stop_motor(); 
 20e:	0e 94 86 04 	call	0x90c	; 0x90c <stop_motor>
 212:	5b cf       	rjmp	.-330    	; 0xca <main+0x38>

00000214 <DIO_vsetpindir>:
#include "Std_macros.h"

void DIO_vsetpindir(unsigned char port,unsigned char pin,unsigned char direction){
	
	
	switch(port){
 214:	84 34       	cpi	r24, 0x44	; 68
 216:	09 f4       	brne	.+2      	; 0x21a <DIO_vsetpindir+0x6>
 218:	54 c0       	rjmp	.+168    	; 0x2c2 <DIO_vsetpindir+0xae>
 21a:	85 34       	cpi	r24, 0x45	; 69
 21c:	48 f4       	brcc	.+18     	; 0x230 <DIO_vsetpindir+0x1c>
 21e:	82 34       	cpi	r24, 0x42	; 66
 220:	99 f1       	breq	.+102    	; 0x288 <DIO_vsetpindir+0x74>
 222:	83 34       	cpi	r24, 0x43	; 67
 224:	08 f0       	brcs	.+2      	; 0x228 <DIO_vsetpindir+0x14>
 226:	6a c0       	rjmp	.+212    	; 0x2fc <DIO_vsetpindir+0xe8>
 228:	81 34       	cpi	r24, 0x41	; 65
 22a:	09 f0       	breq	.+2      	; 0x22e <DIO_vsetpindir+0x1a>
 22c:	83 c0       	rjmp	.+262    	; 0x334 <DIO_vsetpindir+0x120>
 22e:	0f c0       	rjmp	.+30     	; 0x24e <DIO_vsetpindir+0x3a>
 230:	82 36       	cpi	r24, 0x62	; 98
 232:	51 f1       	breq	.+84     	; 0x288 <DIO_vsetpindir+0x74>
 234:	83 36       	cpi	r24, 0x63	; 99
 236:	20 f4       	brcc	.+8      	; 0x240 <DIO_vsetpindir+0x2c>
 238:	81 36       	cpi	r24, 0x61	; 97
 23a:	09 f0       	breq	.+2      	; 0x23e <DIO_vsetpindir+0x2a>
 23c:	7b c0       	rjmp	.+246    	; 0x334 <DIO_vsetpindir+0x120>
 23e:	07 c0       	rjmp	.+14     	; 0x24e <DIO_vsetpindir+0x3a>
 240:	83 36       	cpi	r24, 0x63	; 99
 242:	09 f4       	brne	.+2      	; 0x246 <DIO_vsetpindir+0x32>
 244:	5b c0       	rjmp	.+182    	; 0x2fc <DIO_vsetpindir+0xe8>
 246:	84 36       	cpi	r24, 0x64	; 100
 248:	09 f0       	breq	.+2      	; 0x24c <DIO_vsetpindir+0x38>
 24a:	74 c0       	rjmp	.+232    	; 0x334 <DIO_vsetpindir+0x120>
 24c:	3a c0       	rjmp	.+116    	; 0x2c2 <DIO_vsetpindir+0xae>
		
		case 'A':
		case 'a':
		if (direction==1)
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	69 f4       	brne	.+26     	; 0x26c <DIO_vsetpindir+0x58>
		{
			SET_BIT(DDRA,pin);//Set the direction of the given pin in port A as output
 252:	2a b3       	in	r18, 0x1a	; 26
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	ac 01       	movw	r20, r24
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_vsetpindir+0x4c>
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_vsetpindir+0x48>
 264:	ba 01       	movw	r22, r20
 266:	62 2b       	or	r22, r18
 268:	6a bb       	out	0x1a, r22	; 26
 26a:	08 95       	ret
			//DDRA |=(1<<pin);

		} 
		else
		{
			CLR_BIT(DDRA,pin);//CLEAR the direction of the given pin in port A as input
 26c:	2a b3       	in	r18, 0x1a	; 26
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	ac 01       	movw	r20, r24
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_vsetpindir+0x66>
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_vsetpindir+0x62>
 27e:	ba 01       	movw	r22, r20
 280:	60 95       	com	r22
 282:	62 23       	and	r22, r18
 284:	6a bb       	out	0x1a, r22	; 26
 286:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (direction==1)
 288:	41 30       	cpi	r20, 0x01	; 1
 28a:	69 f4       	brne	.+26     	; 0x2a6 <DIO_vsetpindir+0x92>
		{
			SET_BIT(DDRB,pin);//Set the direction of the given pin in port B as output
 28c:	27 b3       	in	r18, 0x17	; 23
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	ac 01       	movw	r20, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_vsetpindir+0x86>
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_vsetpindir+0x82>
 29e:	ba 01       	movw	r22, r20
 2a0:	62 2b       	or	r22, r18
 2a2:	67 bb       	out	0x17, r22	; 23
 2a4:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRB,pin);//CLEAR the direction of the given pin in port B as input
 2a6:	27 b3       	in	r18, 0x17	; 23
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	ac 01       	movw	r20, r24
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_vsetpindir+0xa0>
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_vsetpindir+0x9c>
 2b8:	ba 01       	movw	r22, r20
 2ba:	60 95       	com	r22
 2bc:	62 23       	and	r22, r18
 2be:	67 bb       	out	0x17, r22	; 23
 2c0:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (direction==1)
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	69 f4       	brne	.+26     	; 0x2e0 <DIO_vsetpindir+0xcc>
		{
			SET_BIT(DDRD,pin);//Set the direction of the given pin in port D as output
 2c6:	21 b3       	in	r18, 0x11	; 17
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	ac 01       	movw	r20, r24
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_vsetpindir+0xc0>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_vsetpindir+0xbc>
 2d8:	ba 01       	movw	r22, r20
 2da:	62 2b       	or	r22, r18
 2dc:	61 bb       	out	0x11, r22	; 17
 2de:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRD,pin);//CLEAR the direction of the given pin in port D as input
 2e0:	21 b3       	in	r18, 0x11	; 17
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	ac 01       	movw	r20, r24
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_vsetpindir+0xda>
 2ea:	44 0f       	add	r20, r20
 2ec:	55 1f       	adc	r21, r21
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_vsetpindir+0xd6>
 2f2:	ba 01       	movw	r22, r20
 2f4:	60 95       	com	r22
 2f6:	62 23       	and	r22, r18
 2f8:	61 bb       	out	0x11, r22	; 17
 2fa:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (direction==1)
 2fc:	41 30       	cpi	r20, 0x01	; 1
 2fe:	69 f4       	brne	.+26     	; 0x31a <DIO_vsetpindir+0x106>
		{
			SET_BIT(DDRC,pin);//Set the direction of the given pin in port C as output
 300:	24 b3       	in	r18, 0x14	; 20
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	ac 01       	movw	r20, r24
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_vsetpindir+0xfa>
 30a:	44 0f       	add	r20, r20
 30c:	55 1f       	adc	r21, r21
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_vsetpindir+0xf6>
 312:	ba 01       	movw	r22, r20
 314:	62 2b       	or	r22, r18
 316:	64 bb       	out	0x14, r22	; 20
 318:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRC,pin);//CLEAR the direction of the given pin in port C as input
 31a:	24 b3       	in	r18, 0x14	; 20
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	ac 01       	movw	r20, r24
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_vsetpindir+0x114>
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_vsetpindir+0x110>
 32c:	ba 01       	movw	r22, r20
 32e:	60 95       	com	r22
 330:	62 23       	and	r22, r18
 332:	64 bb       	out	0x14, r22	; 20
 334:	08 95       	ret

00000336 <DIO_vwrite>:
}
//port direction==output
void DIO_vwrite(unsigned char port,unsigned char pin,unsigned char val){
	
	
	switch(port){
 336:	84 34       	cpi	r24, 0x44	; 68
 338:	09 f4       	brne	.+2      	; 0x33c <DIO_vwrite+0x6>
 33a:	54 c0       	rjmp	.+168    	; 0x3e4 <DIO_vwrite+0xae>
 33c:	85 34       	cpi	r24, 0x45	; 69
 33e:	48 f4       	brcc	.+18     	; 0x352 <DIO_vwrite+0x1c>
 340:	82 34       	cpi	r24, 0x42	; 66
 342:	99 f1       	breq	.+102    	; 0x3aa <DIO_vwrite+0x74>
 344:	83 34       	cpi	r24, 0x43	; 67
 346:	08 f0       	brcs	.+2      	; 0x34a <DIO_vwrite+0x14>
 348:	6a c0       	rjmp	.+212    	; 0x41e <DIO_vwrite+0xe8>
 34a:	81 34       	cpi	r24, 0x41	; 65
 34c:	09 f0       	breq	.+2      	; 0x350 <DIO_vwrite+0x1a>
 34e:	83 c0       	rjmp	.+262    	; 0x456 <DIO_vwrite+0x120>
 350:	0f c0       	rjmp	.+30     	; 0x370 <DIO_vwrite+0x3a>
 352:	82 36       	cpi	r24, 0x62	; 98
 354:	51 f1       	breq	.+84     	; 0x3aa <DIO_vwrite+0x74>
 356:	83 36       	cpi	r24, 0x63	; 99
 358:	20 f4       	brcc	.+8      	; 0x362 <DIO_vwrite+0x2c>
 35a:	81 36       	cpi	r24, 0x61	; 97
 35c:	09 f0       	breq	.+2      	; 0x360 <DIO_vwrite+0x2a>
 35e:	7b c0       	rjmp	.+246    	; 0x456 <DIO_vwrite+0x120>
 360:	07 c0       	rjmp	.+14     	; 0x370 <DIO_vwrite+0x3a>
 362:	83 36       	cpi	r24, 0x63	; 99
 364:	09 f4       	brne	.+2      	; 0x368 <DIO_vwrite+0x32>
 366:	5b c0       	rjmp	.+182    	; 0x41e <DIO_vwrite+0xe8>
 368:	84 36       	cpi	r24, 0x64	; 100
 36a:	09 f0       	breq	.+2      	; 0x36e <DIO_vwrite+0x38>
 36c:	74 c0       	rjmp	.+232    	; 0x456 <DIO_vwrite+0x120>
 36e:	3a c0       	rjmp	.+116    	; 0x3e4 <DIO_vwrite+0xae>
		
		case 'A':
		case 'a':
		if (val==1)
 370:	41 30       	cpi	r20, 0x01	; 1
 372:	69 f4       	brne	.+26     	; 0x38e <DIO_vwrite+0x58>
		{
			SET_BIT(PORTA,pin);//Set the value of the given pin in port A as High
 374:	2b b3       	in	r18, 0x1b	; 27
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	ac 01       	movw	r20, r24
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_vwrite+0x4c>
 37e:	44 0f       	add	r20, r20
 380:	55 1f       	adc	r21, r21
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_vwrite+0x48>
 386:	ba 01       	movw	r22, r20
 388:	62 2b       	or	r22, r18
 38a:	6b bb       	out	0x1b, r22	; 27
 38c:	08 95       	ret
			//PORTA |=(1<<pin);

		}
		else
		{
			CLR_BIT(PORTA,pin);//Set the value of the given pin in port A as LOW
 38e:	2b b3       	in	r18, 0x1b	; 27
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	ac 01       	movw	r20, r24
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_vwrite+0x66>
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_vwrite+0x62>
 3a0:	ba 01       	movw	r22, r20
 3a2:	60 95       	com	r22
 3a4:	62 23       	and	r22, r18
 3a6:	6b bb       	out	0x1b, r22	; 27
 3a8:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (val==1)
 3aa:	41 30       	cpi	r20, 0x01	; 1
 3ac:	69 f4       	brne	.+26     	; 0x3c8 <DIO_vwrite+0x92>
		{
			SET_BIT(PORTB,pin);//Set the value of the given pin in port B as High
 3ae:	28 b3       	in	r18, 0x18	; 24
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	ac 01       	movw	r20, r24
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_vwrite+0x86>
 3b8:	44 0f       	add	r20, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_vwrite+0x82>
 3c0:	ba 01       	movw	r22, r20
 3c2:	62 2b       	or	r22, r18
 3c4:	68 bb       	out	0x18, r22	; 24
 3c6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);//Set the value of the given pin in port B as LOW
 3c8:	28 b3       	in	r18, 0x18	; 24
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	ac 01       	movw	r20, r24
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_vwrite+0xa0>
 3d2:	44 0f       	add	r20, r20
 3d4:	55 1f       	adc	r21, r21
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_vwrite+0x9c>
 3da:	ba 01       	movw	r22, r20
 3dc:	60 95       	com	r22
 3de:	62 23       	and	r22, r18
 3e0:	68 bb       	out	0x18, r22	; 24
 3e2:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (val==1)
 3e4:	41 30       	cpi	r20, 0x01	; 1
 3e6:	69 f4       	brne	.+26     	; 0x402 <DIO_vwrite+0xcc>
		{
			SET_BIT(PORTD,pin);//Set the value of the given pin in port D as High
 3e8:	22 b3       	in	r18, 0x12	; 18
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	ac 01       	movw	r20, r24
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_vwrite+0xc0>
 3f2:	44 0f       	add	r20, r20
 3f4:	55 1f       	adc	r21, r21
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_vwrite+0xbc>
 3fa:	ba 01       	movw	r22, r20
 3fc:	62 2b       	or	r22, r18
 3fe:	62 bb       	out	0x12, r22	; 18
 400:	08 95       	ret


		}
		else
		{
			CLR_BIT(PORTD,pin);//Set the value of the given pin in port D as LOW
 402:	22 b3       	in	r18, 0x12	; 18
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	ac 01       	movw	r20, r24
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_vwrite+0xda>
 40c:	44 0f       	add	r20, r20
 40e:	55 1f       	adc	r21, r21
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_vwrite+0xd6>
 414:	ba 01       	movw	r22, r20
 416:	60 95       	com	r22
 418:	62 23       	and	r22, r18
 41a:	62 bb       	out	0x12, r22	; 18
 41c:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (val==1)
 41e:	41 30       	cpi	r20, 0x01	; 1
 420:	69 f4       	brne	.+26     	; 0x43c <DIO_vwrite+0x106>
		{
			SET_BIT(PORTC,pin);//Set the value of the given pin in port C as High
 422:	25 b3       	in	r18, 0x15	; 21
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	ac 01       	movw	r20, r24
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_vwrite+0xfa>
 42c:	44 0f       	add	r20, r20
 42e:	55 1f       	adc	r21, r21
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_vwrite+0xf6>
 434:	ba 01       	movw	r22, r20
 436:	62 2b       	or	r22, r18
 438:	65 bb       	out	0x15, r22	; 21
 43a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);//Set the value of the given pin in port C as LOW
 43c:	25 b3       	in	r18, 0x15	; 21
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	ac 01       	movw	r20, r24
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_vwrite+0x114>
 446:	44 0f       	add	r20, r20
 448:	55 1f       	adc	r21, r21
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_vwrite+0x110>
 44e:	ba 01       	movw	r22, r20
 450:	60 95       	com	r22
 452:	62 23       	and	r22, r18
 454:	65 bb       	out	0x15, r22	; 21
 456:	08 95       	ret

00000458 <DIO_vtogglepin>:
		
	}
}

void DIO_vtogglepin(unsigned char port,unsigned char pin){
	switch(port){
 458:	84 34       	cpi	r24, 0x44	; 68
 45a:	81 f1       	breq	.+96     	; 0x4bc <DIO_vtogglepin+0x64>
 45c:	85 34       	cpi	r24, 0x45	; 69
 45e:	40 f4       	brcc	.+16     	; 0x470 <DIO_vtogglepin+0x18>
 460:	82 34       	cpi	r24, 0x42	; 66
 462:	f9 f0       	breq	.+62     	; 0x4a2 <DIO_vtogglepin+0x4a>
 464:	83 34       	cpi	r24, 0x43	; 67
 466:	b8 f5       	brcc	.+110    	; 0x4d6 <DIO_vtogglepin+0x7e>
 468:	81 34       	cpi	r24, 0x41	; 65
 46a:	09 f0       	breq	.+2      	; 0x46e <DIO_vtogglepin+0x16>
 46c:	40 c0       	rjmp	.+128    	; 0x4ee <DIO_vtogglepin+0x96>
 46e:	0c c0       	rjmp	.+24     	; 0x488 <DIO_vtogglepin+0x30>
 470:	82 36       	cpi	r24, 0x62	; 98
 472:	b9 f0       	breq	.+46     	; 0x4a2 <DIO_vtogglepin+0x4a>
 474:	83 36       	cpi	r24, 0x63	; 99
 476:	18 f4       	brcc	.+6      	; 0x47e <DIO_vtogglepin+0x26>
 478:	81 36       	cpi	r24, 0x61	; 97
 47a:	c9 f5       	brne	.+114    	; 0x4ee <DIO_vtogglepin+0x96>
 47c:	05 c0       	rjmp	.+10     	; 0x488 <DIO_vtogglepin+0x30>
 47e:	83 36       	cpi	r24, 0x63	; 99
 480:	51 f1       	breq	.+84     	; 0x4d6 <DIO_vtogglepin+0x7e>
 482:	84 36       	cpi	r24, 0x64	; 100
 484:	a1 f5       	brne	.+104    	; 0x4ee <DIO_vtogglepin+0x96>
 486:	1a c0       	rjmp	.+52     	; 0x4bc <DIO_vtogglepin+0x64>
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pin);//Toggle the value of the given pin in port A
 488:	2b b3       	in	r18, 0x1b	; 27
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	ac 01       	movw	r20, r24
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_vtogglepin+0x3e>
 492:	44 0f       	add	r20, r20
 494:	55 1f       	adc	r21, r21
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_vtogglepin+0x3a>
 49a:	ba 01       	movw	r22, r20
 49c:	62 27       	eor	r22, r18
 49e:	6b bb       	out	0x1b, r22	; 27
		break;
 4a0:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pin);//Toggle the value of the given pin in port B
 4a2:	28 b3       	in	r18, 0x18	; 24
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	ac 01       	movw	r20, r24
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_vtogglepin+0x58>
 4ac:	44 0f       	add	r20, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_vtogglepin+0x54>
 4b4:	ba 01       	movw	r22, r20
 4b6:	62 27       	eor	r22, r18
 4b8:	68 bb       	out	0x18, r22	; 24
		break;
 4ba:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pin);//Toggle the value of the given pin in port D
 4bc:	22 b3       	in	r18, 0x12	; 18
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	ac 01       	movw	r20, r24
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_vtogglepin+0x72>
 4c6:	44 0f       	add	r20, r20
 4c8:	55 1f       	adc	r21, r21
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_vtogglepin+0x6e>
 4ce:	ba 01       	movw	r22, r20
 4d0:	62 27       	eor	r22, r18
 4d2:	62 bb       	out	0x12, r22	; 18
		break;
 4d4:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pin);//Toggle the value of the given pin in port C
 4d6:	25 b3       	in	r18, 0x15	; 21
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	ac 01       	movw	r20, r24
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_vtogglepin+0x8c>
 4e0:	44 0f       	add	r20, r20
 4e2:	55 1f       	adc	r21, r21
 4e4:	6a 95       	dec	r22
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_vtogglepin+0x88>
 4e8:	ba 01       	movw	r22, r20
 4ea:	62 27       	eor	r22, r18
 4ec:	65 bb       	out	0x15, r22	; 21
 4ee:	08 95       	ret

000004f0 <DIO_uread>:
		default:break;
	}
}
unsigned char DIO_uread(unsigned char port ,unsigned char pin){
	unsigned char return_value;
	switch(port){
 4f0:	84 34       	cpi	r24, 0x44	; 68
 4f2:	09 f4       	brne	.+2      	; 0x4f6 <DIO_uread+0x6>
 4f4:	51 c0       	rjmp	.+162    	; 0x598 <DIO_uread+0xa8>
 4f6:	85 34       	cpi	r24, 0x45	; 69
 4f8:	40 f4       	brcc	.+16     	; 0x50a <DIO_uread+0x1a>
 4fa:	82 34       	cpi	r24, 0x42	; 66
 4fc:	39 f1       	breq	.+78     	; 0x54c <DIO_uread+0x5c>
 4fe:	83 34       	cpi	r24, 0x43	; 67
 500:	c0 f5       	brcc	.+112    	; 0x572 <DIO_uread+0x82>
 502:	81 34       	cpi	r24, 0x41	; 65
 504:	09 f0       	breq	.+2      	; 0x508 <DIO_uread+0x18>
 506:	5a c0       	rjmp	.+180    	; 0x5bc <DIO_uread+0xcc>
 508:	0e c0       	rjmp	.+28     	; 0x526 <DIO_uread+0x36>
 50a:	82 36       	cpi	r24, 0x62	; 98
 50c:	f9 f0       	breq	.+62     	; 0x54c <DIO_uread+0x5c>
 50e:	83 36       	cpi	r24, 0x63	; 99
 510:	20 f4       	brcc	.+8      	; 0x51a <DIO_uread+0x2a>
 512:	81 36       	cpi	r24, 0x61	; 97
 514:	09 f0       	breq	.+2      	; 0x518 <DIO_uread+0x28>
 516:	52 c0       	rjmp	.+164    	; 0x5bc <DIO_uread+0xcc>
 518:	06 c0       	rjmp	.+12     	; 0x526 <DIO_uread+0x36>
 51a:	83 36       	cpi	r24, 0x63	; 99
 51c:	51 f1       	breq	.+84     	; 0x572 <DIO_uread+0x82>
 51e:	84 36       	cpi	r24, 0x64	; 100
 520:	09 f0       	breq	.+2      	; 0x524 <DIO_uread+0x34>
 522:	4c c0       	rjmp	.+152    	; 0x5bc <DIO_uread+0xcc>
 524:	39 c0       	rjmp	.+114    	; 0x598 <DIO_uread+0xa8>
		
		case 'A':
		case 'a':
		return_value=READ_BIT(PINA,pin);//Read the value from the given pin in port A
 526:	29 b3       	in	r18, 0x19	; 25
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	06 2e       	mov	r0, r22
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_uread+0x44>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_uread+0x40>
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	82 23       	and	r24, r18
 53c:	93 23       	and	r25, r19
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_uread+0x54>
 540:	96 95       	lsr	r25
 542:	87 95       	ror	r24
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_uread+0x50>
 548:	98 2f       	mov	r25, r24
		break;
 54a:	38 c0       	rjmp	.+112    	; 0x5bc <DIO_uread+0xcc>


	case 'B':
	case 'b':
	return_value=READ_BIT(PINB,pin);//Read the value from the given pin in port B
 54c:	26 b3       	in	r18, 0x16	; 22
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	06 2e       	mov	r0, r22
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_uread+0x6a>
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	0a 94       	dec	r0
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_uread+0x66>
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	82 23       	and	r24, r18
 562:	93 23       	and	r25, r19
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_uread+0x7a>
 566:	96 95       	lsr	r25
 568:	87 95       	ror	r24
 56a:	6a 95       	dec	r22
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_uread+0x76>
 56e:	98 2f       	mov	r25, r24
	break;
 570:	25 c0       	rjmp	.+74     	; 0x5bc <DIO_uread+0xcc>
		
			case 'C':
			case 'c':
			return_value=READ_BIT(PINC,pin);//Read the value from the given pin in port C
 572:	23 b3       	in	r18, 0x13	; 19
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	06 2e       	mov	r0, r22
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_uread+0x90>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	0a 94       	dec	r0
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_uread+0x8c>
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	82 23       	and	r24, r18
 588:	93 23       	and	r25, r19
 58a:	02 c0       	rjmp	.+4      	; 0x590 <DIO_uread+0xa0>
 58c:	96 95       	lsr	r25
 58e:	87 95       	ror	r24
 590:	6a 95       	dec	r22
 592:	e2 f7       	brpl	.-8      	; 0x58c <DIO_uread+0x9c>
 594:	98 2f       	mov	r25, r24
			break;
 596:	12 c0       	rjmp	.+36     	; 0x5bc <DIO_uread+0xcc>
			
				case 'D':
				case 'd':
				return_value=READ_BIT(PIND,pin);//Read the value from the given pin in port D
 598:	20 b3       	in	r18, 0x10	; 16
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	06 2e       	mov	r0, r22
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_uread+0xb6>
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	0a 94       	dec	r0
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_uread+0xb2>
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	82 23       	and	r24, r18
 5ae:	93 23       	and	r25, r19
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_uread+0xc6>
 5b2:	96 95       	lsr	r25
 5b4:	87 95       	ror	r24
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_uread+0xc2>
 5ba:	98 2f       	mov	r25, r24
				break;
		default:break;
		
	}
	return return_value;
}
 5bc:	89 2f       	mov	r24, r25
 5be:	08 95       	ret

000005c0 <DIO_vsetportdir>:
//direction port


void DIO_vsetportdir(unsigned char port,unsigned char direction){
	
	switch(port){
 5c0:	84 34       	cpi	r24, 0x44	; 68
 5c2:	c9 f0       	breq	.+50     	; 0x5f6 <DIO_vsetportdir+0x36>
 5c4:	85 34       	cpi	r24, 0x45	; 69
 5c6:	38 f4       	brcc	.+14     	; 0x5d6 <DIO_vsetportdir+0x16>
 5c8:	82 34       	cpi	r24, 0x42	; 66
 5ca:	99 f0       	breq	.+38     	; 0x5f2 <DIO_vsetportdir+0x32>
 5cc:	83 34       	cpi	r24, 0x43	; 67
 5ce:	a8 f4       	brcc	.+42     	; 0x5fa <DIO_vsetportdir+0x3a>
 5d0:	81 34       	cpi	r24, 0x41	; 65
 5d2:	a1 f4       	brne	.+40     	; 0x5fc <DIO_vsetportdir+0x3c>
 5d4:	0c c0       	rjmp	.+24     	; 0x5ee <DIO_vsetportdir+0x2e>
 5d6:	82 36       	cpi	r24, 0x62	; 98
 5d8:	61 f0       	breq	.+24     	; 0x5f2 <DIO_vsetportdir+0x32>
 5da:	83 36       	cpi	r24, 0x63	; 99
 5dc:	18 f4       	brcc	.+6      	; 0x5e4 <DIO_vsetportdir+0x24>
 5de:	81 36       	cpi	r24, 0x61	; 97
 5e0:	69 f4       	brne	.+26     	; 0x5fc <DIO_vsetportdir+0x3c>
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <DIO_vsetportdir+0x2e>
 5e4:	83 36       	cpi	r24, 0x63	; 99
 5e6:	49 f0       	breq	.+18     	; 0x5fa <DIO_vsetportdir+0x3a>
 5e8:	84 36       	cpi	r24, 0x64	; 100
 5ea:	41 f4       	brne	.+16     	; 0x5fc <DIO_vsetportdir+0x3c>
 5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <DIO_vsetportdir+0x36>
		
		case 'A':
		case 'a':
		DDRA=direction;//set the direction of port A
 5ee:	6a bb       	out	0x1a, r22	; 26

		break;
 5f0:	08 95       	ret
		
		case 'B':
		case 'b':	
			DDRB=direction;
 5f2:	67 bb       	out	0x17, r22	; 23

		break;
 5f4:	08 95       	ret
		
		case 'D':
		case 'd':
		DDRD=direction;
 5f6:	61 bb       	out	0x11, r22	; 17
		
		
		break;
 5f8:	08 95       	ret
		
		case 'C':
		case 'c':
		DDRC=direction;
 5fa:	64 bb       	out	0x14, r22	; 20
 5fc:	08 95       	ret

000005fe <DIO_vWRITEport>:



void DIO_vWRITEport(unsigned char port,unsigned char val){
	
	switch(port){
 5fe:	84 34       	cpi	r24, 0x44	; 68
 600:	c9 f0       	breq	.+50     	; 0x634 <DIO_vWRITEport+0x36>
 602:	85 34       	cpi	r24, 0x45	; 69
 604:	38 f4       	brcc	.+14     	; 0x614 <DIO_vWRITEport+0x16>
 606:	82 34       	cpi	r24, 0x42	; 66
 608:	99 f0       	breq	.+38     	; 0x630 <DIO_vWRITEport+0x32>
 60a:	83 34       	cpi	r24, 0x43	; 67
 60c:	a8 f4       	brcc	.+42     	; 0x638 <DIO_vWRITEport+0x3a>
 60e:	81 34       	cpi	r24, 0x41	; 65
 610:	a1 f4       	brne	.+40     	; 0x63a <DIO_vWRITEport+0x3c>
 612:	0c c0       	rjmp	.+24     	; 0x62c <DIO_vWRITEport+0x2e>
 614:	82 36       	cpi	r24, 0x62	; 98
 616:	61 f0       	breq	.+24     	; 0x630 <DIO_vWRITEport+0x32>
 618:	83 36       	cpi	r24, 0x63	; 99
 61a:	18 f4       	brcc	.+6      	; 0x622 <DIO_vWRITEport+0x24>
 61c:	81 36       	cpi	r24, 0x61	; 97
 61e:	69 f4       	brne	.+26     	; 0x63a <DIO_vWRITEport+0x3c>
 620:	05 c0       	rjmp	.+10     	; 0x62c <DIO_vWRITEport+0x2e>
 622:	83 36       	cpi	r24, 0x63	; 99
 624:	49 f0       	breq	.+18     	; 0x638 <DIO_vWRITEport+0x3a>
 626:	84 36       	cpi	r24, 0x64	; 100
 628:	41 f4       	brne	.+16     	; 0x63a <DIO_vWRITEport+0x3c>
 62a:	04 c0       	rjmp	.+8      	; 0x634 <DIO_vWRITEport+0x36>
		
		case 'A':
		case 'a':
		PORTA=val;//Write the given value to the port A
 62c:	6b bb       	out	0x1b, r22	; 27

		break;
 62e:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB=val;//Write the given value to the port B
 630:	68 bb       	out	0x18, r22	; 24
	

		break;
 632:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD=val;//Write the given value to the port D
 634:	62 bb       	out	0x12, r22	; 18
		
		break;
 636:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC=val;//Write the given value to the port C
 638:	65 bb       	out	0x15, r22	; 21
 63a:	08 95       	ret

0000063c <DIO_ureadport>:
	}
	
	
	unsigned char DIO_ureadport(unsigned char port){
		unsigned char return_val;
		switch(port){
 63c:	84 34       	cpi	r24, 0x44	; 68
 63e:	d1 f0       	breq	.+52     	; 0x674 <DIO_ureadport+0x38>
 640:	85 34       	cpi	r24, 0x45	; 69
 642:	38 f4       	brcc	.+14     	; 0x652 <DIO_ureadport+0x16>
 644:	82 34       	cpi	r24, 0x42	; 66
 646:	99 f0       	breq	.+38     	; 0x66e <DIO_ureadport+0x32>
 648:	83 34       	cpi	r24, 0x43	; 67
 64a:	b8 f4       	brcc	.+46     	; 0x67a <DIO_ureadport+0x3e>
 64c:	81 34       	cpi	r24, 0x41	; 65
 64e:	b9 f4       	brne	.+46     	; 0x67e <DIO_ureadport+0x42>
 650:	0c c0       	rjmp	.+24     	; 0x66a <DIO_ureadport+0x2e>
 652:	82 36       	cpi	r24, 0x62	; 98
 654:	61 f0       	breq	.+24     	; 0x66e <DIO_ureadport+0x32>
 656:	83 36       	cpi	r24, 0x63	; 99
 658:	18 f4       	brcc	.+6      	; 0x660 <DIO_ureadport+0x24>
 65a:	81 36       	cpi	r24, 0x61	; 97
 65c:	81 f4       	brne	.+32     	; 0x67e <DIO_ureadport+0x42>
 65e:	05 c0       	rjmp	.+10     	; 0x66a <DIO_ureadport+0x2e>
 660:	83 36       	cpi	r24, 0x63	; 99
 662:	59 f0       	breq	.+22     	; 0x67a <DIO_ureadport+0x3e>
 664:	84 36       	cpi	r24, 0x64	; 100
 666:	59 f4       	brne	.+22     	; 0x67e <DIO_ureadport+0x42>
 668:	05 c0       	rjmp	.+10     	; 0x674 <DIO_ureadport+0x38>
			
			case 'A':
			case 'a':
			return_val=PINA;//read the value to the port A
 66a:	99 b3       	in	r25, 0x19	; 25

			break;
 66c:	08 c0       	rjmp	.+16     	; 0x67e <DIO_ureadport+0x42>
			
			case 'B':
			case 'b':
			PORTB=PINB;//READ value to the port B
 66e:	86 b3       	in	r24, 0x16	; 22
 670:	88 bb       	out	0x18, r24	; 24
			

			break;
 672:	05 c0       	rjmp	.+10     	; 0x67e <DIO_ureadport+0x42>
			
			case 'D':
			case 'd':
			PORTD=PIND;//READ  value to the port D
 674:	80 b3       	in	r24, 0x10	; 16
 676:	82 bb       	out	0x12, r24	; 18
			
			break;
 678:	02 c0       	rjmp	.+4      	; 0x67e <DIO_ureadport+0x42>
			
			case 'C':
			case 'c':
			PORTC=PINC;//READ  value to the port C
 67a:	83 b3       	in	r24, 0x13	; 19
 67c:	85 bb       	out	0x15, r24	; 21
			break;
			default:break;
		}			
			return return_val;

		}
 67e:	89 2f       	mov	r24, r25
 680:	08 95       	ret

00000682 <DIO_vtoggleport>:
		
		
void DIO_vtoggleport(unsigned char port){
			
			switch(port){
 682:	84 34       	cpi	r24, 0x44	; 68
 684:	e9 f0       	breq	.+58     	; 0x6c0 <DIO_vtoggleport+0x3e>
 686:	85 34       	cpi	r24, 0x45	; 69
 688:	38 f4       	brcc	.+14     	; 0x698 <DIO_vtoggleport+0x16>
 68a:	82 34       	cpi	r24, 0x42	; 66
 68c:	a9 f0       	breq	.+42     	; 0x6b8 <DIO_vtoggleport+0x36>
 68e:	83 34       	cpi	r24, 0x43	; 67
 690:	d8 f4       	brcc	.+54     	; 0x6c8 <DIO_vtoggleport+0x46>
 692:	81 34       	cpi	r24, 0x41	; 65
 694:	e1 f4       	brne	.+56     	; 0x6ce <DIO_vtoggleport+0x4c>
 696:	0c c0       	rjmp	.+24     	; 0x6b0 <DIO_vtoggleport+0x2e>
 698:	82 36       	cpi	r24, 0x62	; 98
 69a:	71 f0       	breq	.+28     	; 0x6b8 <DIO_vtoggleport+0x36>
 69c:	83 36       	cpi	r24, 0x63	; 99
 69e:	18 f4       	brcc	.+6      	; 0x6a6 <DIO_vtoggleport+0x24>
 6a0:	81 36       	cpi	r24, 0x61	; 97
 6a2:	a9 f4       	brne	.+42     	; 0x6ce <DIO_vtoggleport+0x4c>
 6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <DIO_vtoggleport+0x2e>
 6a6:	83 36       	cpi	r24, 0x63	; 99
 6a8:	79 f0       	breq	.+30     	; 0x6c8 <DIO_vtoggleport+0x46>
 6aa:	84 36       	cpi	r24, 0x64	; 100
 6ac:	81 f4       	brne	.+32     	; 0x6ce <DIO_vtoggleport+0x4c>
 6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <DIO_vtoggleport+0x3e>
				
				case 'A':
				case 'a':
				PORTA=~PORTA;    // or PORTA=PORTA^0xff
 6b0:	8b b3       	in	r24, 0x1b	; 27
 6b2:	80 95       	com	r24
 6b4:	8b bb       	out	0x1b, r24	; 27
				break;
 6b6:	08 95       	ret
				
				case 'B':
				case 'b':
				PORTB=~PORTB;//Write the given value to the port B
 6b8:	88 b3       	in	r24, 0x18	; 24
 6ba:	80 95       	com	r24
 6bc:	88 bb       	out	0x18, r24	; 24
				

				break;
 6be:	08 95       	ret
				
				case 'D':
				case 'd':
				PORTD=~PORTD;
 6c0:	82 b3       	in	r24, 0x12	; 18
 6c2:	80 95       	com	r24
 6c4:	82 bb       	out	0x12, r24	; 18
				
				break;
 6c6:	08 95       	ret
				
				case 'C':
				case 'c':
				PORTC=~PORTC;
 6c8:	85 b3       	in	r24, 0x15	; 21
 6ca:	80 95       	com	r24
 6cc:	85 bb       	out	0x15, r24	; 21
 6ce:	08 95       	ret

000006d0 <DIO_vconnectpullup>:
or

 */
void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 6d0:	82 34       	cpi	r24, 0x42	; 66
 6d2:	51 f1       	breq	.+84     	; 0x728 <DIO_vconnectpullup+0x58>
 6d4:	83 34       	cpi	r24, 0x43	; 67
 6d6:	20 f4       	brcc	.+8      	; 0x6e0 <DIO_vconnectpullup+0x10>
 6d8:	81 34       	cpi	r24, 0x41	; 65
 6da:	09 f0       	breq	.+2      	; 0x6de <DIO_vconnectpullup+0xe>
 6dc:	7b c0       	rjmp	.+246    	; 0x7d4 <DIO_vconnectpullup+0x104>
 6de:	07 c0       	rjmp	.+14     	; 0x6ee <DIO_vconnectpullup+0x1e>
 6e0:	83 34       	cpi	r24, 0x43	; 67
 6e2:	09 f4       	brne	.+2      	; 0x6e6 <DIO_vconnectpullup+0x16>
 6e4:	3e c0       	rjmp	.+124    	; 0x762 <DIO_vconnectpullup+0x92>
 6e6:	84 34       	cpi	r24, 0x44	; 68
 6e8:	09 f0       	breq	.+2      	; 0x6ec <DIO_vconnectpullup+0x1c>
 6ea:	74 c0       	rjmp	.+232    	; 0x7d4 <DIO_vconnectpullup+0x104>
 6ec:	57 c0       	rjmp	.+174    	; 0x79c <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 6ee:	41 30       	cpi	r20, 0x01	; 1
 6f0:	69 f4       	brne	.+26     	; 0x70c <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 6f2:	2b b3       	in	r18, 0x1b	; 27
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	ac 01       	movw	r20, r24
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <DIO_vconnectpullup+0x30>
 6fc:	44 0f       	add	r20, r20
 6fe:	55 1f       	adc	r21, r21
 700:	6a 95       	dec	r22
 702:	e2 f7       	brpl	.-8      	; 0x6fc <DIO_vconnectpullup+0x2c>
 704:	ba 01       	movw	r22, r20
 706:	62 2b       	or	r22, r18
 708:	6b bb       	out	0x1b, r22	; 27
 70a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 70c:	2b b3       	in	r18, 0x1b	; 27
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	ac 01       	movw	r20, r24
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_vconnectpullup+0x4a>
 716:	44 0f       	add	r20, r20
 718:	55 1f       	adc	r21, r21
 71a:	6a 95       	dec	r22
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_vconnectpullup+0x46>
 71e:	ba 01       	movw	r22, r20
 720:	60 95       	com	r22
 722:	62 23       	and	r22, r18
 724:	6b bb       	out	0x1b, r22	; 27
 726:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 728:	41 30       	cpi	r20, 0x01	; 1
 72a:	69 f4       	brne	.+26     	; 0x746 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 72c:	28 b3       	in	r18, 0x18	; 24
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	ac 01       	movw	r20, r24
 734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_vconnectpullup+0x6a>
 736:	44 0f       	add	r20, r20
 738:	55 1f       	adc	r21, r21
 73a:	6a 95       	dec	r22
 73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_vconnectpullup+0x66>
 73e:	ba 01       	movw	r22, r20
 740:	62 2b       	or	r22, r18
 742:	68 bb       	out	0x18, r22	; 24
 744:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 746:	28 b3       	in	r18, 0x18	; 24
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	ac 01       	movw	r20, r24
 74e:	02 c0       	rjmp	.+4      	; 0x754 <DIO_vconnectpullup+0x84>
 750:	44 0f       	add	r20, r20
 752:	55 1f       	adc	r21, r21
 754:	6a 95       	dec	r22
 756:	e2 f7       	brpl	.-8      	; 0x750 <DIO_vconnectpullup+0x80>
 758:	ba 01       	movw	r22, r20
 75a:	60 95       	com	r22
 75c:	62 23       	and	r22, r18
 75e:	68 bb       	out	0x18, r22	; 24
 760:	08 95       	ret
		}
		break;
	case 'C':
	if(connect_pullup==1)
 762:	41 30       	cpi	r20, 0x01	; 1
 764:	69 f4       	brne	.+26     	; 0x780 <DIO_vconnectpullup+0xb0>
	{
		SET_BIT(PORTC,pinnumber);
 766:	25 b3       	in	r18, 0x15	; 21
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	ac 01       	movw	r20, r24
 76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_vconnectpullup+0xa4>
 770:	44 0f       	add	r20, r20
 772:	55 1f       	adc	r21, r21
 774:	6a 95       	dec	r22
 776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_vconnectpullup+0xa0>
 778:	ba 01       	movw	r22, r20
 77a:	62 2b       	or	r22, r18
 77c:	65 bb       	out	0x15, r22	; 21
 77e:	08 95       	ret
		
	}
	else
	{
		CLR_BIT(PORTC,pinnumber);
 780:	25 b3       	in	r18, 0x15	; 21
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	ac 01       	movw	r20, r24
 788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_vconnectpullup+0xbe>
 78a:	44 0f       	add	r20, r20
 78c:	55 1f       	adc	r21, r21
 78e:	6a 95       	dec	r22
 790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_vconnectpullup+0xba>
 792:	ba 01       	movw	r22, r20
 794:	60 95       	com	r22
 796:	62 23       	and	r22, r18
 798:	65 bb       	out	0x15, r22	; 21
 79a:	08 95       	ret
	}
	break;
	case 'D':
	if(connect_pullup==1)
 79c:	41 30       	cpi	r20, 0x01	; 1
 79e:	69 f4       	brne	.+26     	; 0x7ba <DIO_vconnectpullup+0xea>
	{
		SET_BIT(PORTD,pinnumber);
 7a0:	22 b3       	in	r18, 0x12	; 18
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	ac 01       	movw	r20, r24
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_vconnectpullup+0xde>
 7aa:	44 0f       	add	r20, r20
 7ac:	55 1f       	adc	r21, r21
 7ae:	6a 95       	dec	r22
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_vconnectpullup+0xda>
 7b2:	ba 01       	movw	r22, r20
 7b4:	62 2b       	or	r22, r18
 7b6:	62 bb       	out	0x12, r22	; 18
 7b8:	08 95       	ret
		
	}
	else
	{
		CLR_BIT(PORTD,pinnumber);
 7ba:	22 b3       	in	r18, 0x12	; 18
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	ac 01       	movw	r20, r24
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_vconnectpullup+0xf8>
 7c4:	44 0f       	add	r20, r20
 7c6:	55 1f       	adc	r21, r21
 7c8:	6a 95       	dec	r22
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_vconnectpullup+0xf4>
 7cc:	ba 01       	movw	r22, r20
 7ce:	60 95       	com	r22
 7d0:	62 23       	and	r22, r18
 7d2:	62 bb       	out	0x12, r22	; 18
 7d4:	08 95       	ret

000007d6 <write_low_nibble>:
}

	//We will increase  these two functions in DIO.c
	void write_low_nibble(unsigned char portname,unsigned char value)
	{
		value&=0x0f;
 7d6:	6f 70       	andi	r22, 0x0F	; 15
		switch(portname)
 7d8:	82 34       	cpi	r24, 0x42	; 66
 7da:	89 f0       	breq	.+34     	; 0x7fe <write_low_nibble+0x28>
 7dc:	83 34       	cpi	r24, 0x43	; 67
 7de:	18 f4       	brcc	.+6      	; 0x7e6 <write_low_nibble+0x10>
 7e0:	81 34       	cpi	r24, 0x41	; 65
 7e2:	09 f5       	brne	.+66     	; 0x826 <write_low_nibble+0x50>
 7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <write_low_nibble+0x1a>
 7e6:	83 34       	cpi	r24, 0x43	; 67
 7e8:	89 f0       	breq	.+34     	; 0x80c <write_low_nibble+0x36>
 7ea:	84 34       	cpi	r24, 0x44	; 68
 7ec:	e1 f4       	brne	.+56     	; 0x826 <write_low_nibble+0x50>
 7ee:	15 c0       	rjmp	.+42     	; 0x81a <write_low_nibble+0x44>
		{
			case 'A':
			PORTA&=0xf0;// 0b11110000
 7f0:	8b b3       	in	r24, 0x1b	; 27
 7f2:	80 7f       	andi	r24, 0xF0	; 240
 7f4:	8b bb       	out	0x1b, r24	; 27
			PORTA|=value;
 7f6:	8b b3       	in	r24, 0x1b	; 27
 7f8:	68 2b       	or	r22, r24
 7fa:	6b bb       	out	0x1b, r22	; 27
			break;
 7fc:	08 95       	ret
			case 'B':
			PORTB&=0xf0;
 7fe:	88 b3       	in	r24, 0x18	; 24
 800:	80 7f       	andi	r24, 0xF0	; 240
 802:	88 bb       	out	0x18, r24	; 24
			PORTB|=value;
 804:	88 b3       	in	r24, 0x18	; 24
 806:	68 2b       	or	r22, r24
 808:	68 bb       	out	0x18, r22	; 24
			break;
 80a:	08 95       	ret
case 'C':
PORTC&=0xf0;
 80c:	85 b3       	in	r24, 0x15	; 21
 80e:	80 7f       	andi	r24, 0xF0	; 240
 810:	85 bb       	out	0x15, r24	; 21
PORTC|=value;
 812:	85 b3       	in	r24, 0x15	; 21
 814:	68 2b       	or	r22, r24
 816:	65 bb       	out	0x15, r22	; 21
break;
 818:	08 95       	ret
case 'D':
PORTD&=0xf0;
 81a:	82 b3       	in	r24, 0x12	; 18
 81c:	80 7f       	andi	r24, 0xF0	; 240
 81e:	82 bb       	out	0x12, r24	; 18
PORTD|=value;
 820:	82 b3       	in	r24, 0x12	; 18
 822:	68 2b       	or	r22, r24
 824:	62 bb       	out	0x12, r22	; 18
 826:	08 95       	ret

00000828 <write_high_nibble>:
}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 828:	62 95       	swap	r22
 82a:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 82c:	82 34       	cpi	r24, 0x42	; 66
 82e:	89 f0       	breq	.+34     	; 0x852 <write_high_nibble+0x2a>
 830:	83 34       	cpi	r24, 0x43	; 67
 832:	18 f4       	brcc	.+6      	; 0x83a <write_high_nibble+0x12>
 834:	81 34       	cpi	r24, 0x41	; 65
 836:	09 f5       	brne	.+66     	; 0x87a <__stack+0x1b>
 838:	05 c0       	rjmp	.+10     	; 0x844 <write_high_nibble+0x1c>
 83a:	83 34       	cpi	r24, 0x43	; 67
 83c:	89 f0       	breq	.+34     	; 0x860 <__stack+0x1>
 83e:	84 34       	cpi	r24, 0x44	; 68
 840:	e1 f4       	brne	.+56     	; 0x87a <__stack+0x1b>
 842:	15 c0       	rjmp	.+42     	; 0x86e <__stack+0xf>
	{
		case 'A':
		PORTA&=0x0f;
 844:	8b b3       	in	r24, 0x1b	; 27
 846:	8f 70       	andi	r24, 0x0F	; 15
 848:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 84a:	8b b3       	in	r24, 0x1b	; 27
 84c:	68 2b       	or	r22, r24
 84e:	6b bb       	out	0x1b, r22	; 27
		break;
 850:	08 95       	ret
		case 'B':
		PORTB&=0x0f;
 852:	88 b3       	in	r24, 0x18	; 24
 854:	8f 70       	andi	r24, 0x0F	; 15
 856:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 858:	88 b3       	in	r24, 0x18	; 24
 85a:	68 2b       	or	r22, r24
 85c:	68 bb       	out	0x18, r22	; 24
		break;
 85e:	08 95       	ret
		case 'C':
		PORTC&=0x0f;
 860:	85 b3       	in	r24, 0x15	; 21
 862:	8f 70       	andi	r24, 0x0F	; 15
 864:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 866:	85 b3       	in	r24, 0x15	; 21
 868:	68 2b       	or	r22, r24
 86a:	65 bb       	out	0x15, r22	; 21
		break;
 86c:	08 95       	ret
		case 'D':
		PORTD&=0x0f;
 86e:	82 b3       	in	r24, 0x12	; 18
 870:	8f 70       	andi	r24, 0x0F	; 15
 872:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 874:	82 b3       	in	r24, 0x12	; 18
 876:	68 2b       	or	r22, r24
 878:	62 bb       	out	0x12, r22	; 18
 87a:	08 95       	ret

0000087c <motor_vinti>:

int x=80;


void motor_vinti(){
DDRB=0XFF;//output motor  left
 87c:	8f ef       	ldi	r24, 0xFF	; 255
 87e:	87 bb       	out	0x17, r24	; 23

DDRA=0XFF;// motor output right
 880:	8a bb       	out	0x1a, r24	; 26

//L293D Pin 1 -> En1 -> motor 1

SET_BIT(PORTA,2);
 882:	da 9a       	sbi	0x1b, 2	; 27
//L293D Pin 9 -> En2 -> motor 2
SET_BIT(PORTA,3);
 884:	db 9a       	sbi	0x1b, 3	; 27
//L293D Pin 1 -> En1 -> motor 3
SET_BIT(PORTB,2);
 886:	c2 9a       	sbi	0x18, 2	; 24
//L293D Pin 1 -> En2 -> motor 4
SET_BIT(PORTB,3);
 888:	c3 9a       	sbi	0x18, 3	; 24

}
 88a:	08 95       	ret

0000088c <left_forword>:
		

void left_forword(){
	/*left ROTAT MOTOR CLOCKWISE*/
	
	DIO_vwrite('B',0,1);
 88c:	82 e4       	ldi	r24, 0x42	; 66
 88e:	60 e0       	ldi	r22, 0x00	; 0
 890:	41 e0       	ldi	r20, 0x01	; 1
 892:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
	DIO_vwrite('B',5,1);
 896:	82 e4       	ldi	r24, 0x42	; 66
 898:	65 e0       	ldi	r22, 0x05	; 5
 89a:	41 e0       	ldi	r20, 0x01	; 1
 89c:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
	
}
 8a0:	08 95       	ret

000008a2 <left_backword>:

void left_backword(){
	
	
	/* left ROTAT MOTOR ANTI-CLOCKWISE*/
	DIO_vwrite('B',1,1);
 8a2:	82 e4       	ldi	r24, 0x42	; 66
 8a4:	61 e0       	ldi	r22, 0x01	; 1
 8a6:	41 e0       	ldi	r20, 0x01	; 1
 8a8:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
	DIO_vwrite('B',4,1);
 8ac:	82 e4       	ldi	r24, 0x42	; 66
 8ae:	64 e0       	ldi	r22, 0x04	; 4
 8b0:	41 e0       	ldi	r20, 0x01	; 1
 8b2:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
	
	
}
 8b6:	08 95       	ret

000008b8 <right_forword>:

	

	void right_forword(){
		/*right ROTAT MOTOR CLOCKWISE*/
		DIO_vwrite('A',0,1);
 8b8:	81 e4       	ldi	r24, 0x41	; 65
 8ba:	60 e0       	ldi	r22, 0x00	; 0
 8bc:	41 e0       	ldi	r20, 0x01	; 1
 8be:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
		DIO_vwrite('A',5,1);
 8c2:	81 e4       	ldi	r24, 0x41	; 65
 8c4:	65 e0       	ldi	r22, 0x05	; 5
 8c6:	41 e0       	ldi	r20, 0x01	; 1
 8c8:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
	
		
	}
 8cc:	08 95       	ret

000008ce <right_backword>:

	void right_backword(){
		
		/* left ROTAT MOTOR ANTI-CLOCKWISE*/
		DIO_vwrite('A',1,1);
 8ce:	81 e4       	ldi	r24, 0x41	; 65
 8d0:	61 e0       	ldi	r22, 0x01	; 1
 8d2:	41 e0       	ldi	r20, 0x01	; 1
 8d4:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
		DIO_vwrite('A',4,1);
 8d8:	81 e4       	ldi	r24, 0x41	; 65
 8da:	64 e0       	ldi	r22, 0x04	; 4
 8dc:	41 e0       	ldi	r20, 0x01	; 1
 8de:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
	
		
	}
 8e2:	08 95       	ret

000008e4 <motor_forword>:
	
	void motor_forword(){
		left_forword();
 8e4:	0e 94 46 04 	call	0x88c	; 0x88c <left_forword>
		right_forword();
 8e8:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <right_forword>

		
	}
 8ec:	08 95       	ret

000008ee <motor_backword>:
	
	
		void motor_backword(){
			left_backword();
 8ee:	0e 94 51 04 	call	0x8a2	; 0x8a2 <left_backword>
			right_backword();
 8f2:	0e 94 67 04 	call	0x8ce	; 0x8ce <right_backword>
	
			
		}
 8f6:	08 95       	ret

000008f8 <turn_right>:
		
		
	void turn_right(){
		left_forword();
 8f8:	0e 94 46 04 	call	0x88c	; 0x88c <left_forword>
		right_backword();
 8fc:	0e 94 67 04 	call	0x8ce	; 0x8ce <right_backword>
		
	}
 900:	08 95       	ret

00000902 <turn_left>:
	
	void turn_left(){
		left_backword();
 902:	0e 94 51 04 	call	0x8a2	; 0x8a2 <left_backword>
		right_forword();
 906:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <right_forword>
	}
 90a:	08 95       	ret

0000090c <stop_motor>:
	
	void stop_motor(){

			DIO_vwrite('A',0,0);
 90c:	81 e4       	ldi	r24, 0x41	; 65
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	40 e0       	ldi	r20, 0x00	; 0
 912:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
			DIO_vwrite('A',5,0);
 916:	81 e4       	ldi	r24, 0x41	; 65
 918:	65 e0       	ldi	r22, 0x05	; 5
 91a:	40 e0       	ldi	r20, 0x00	; 0
 91c:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
			DIO_vwrite('B',0,0);
 920:	82 e4       	ldi	r24, 0x42	; 66
 922:	60 e0       	ldi	r22, 0x00	; 0
 924:	40 e0       	ldi	r20, 0x00	; 0
 926:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
			DIO_vwrite('B',5,0);	
 92a:	82 e4       	ldi	r24, 0x42	; 66
 92c:	65 e0       	ldi	r22, 0x05	; 5
 92e:	40 e0       	ldi	r20, 0x00	; 0
 930:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
					DIO_vwrite('A',1,0);
 934:	81 e4       	ldi	r24, 0x41	; 65
 936:	61 e0       	ldi	r22, 0x01	; 1
 938:	40 e0       	ldi	r20, 0x00	; 0
 93a:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
					DIO_vwrite('A',4,0);
 93e:	81 e4       	ldi	r24, 0x41	; 65
 940:	64 e0       	ldi	r22, 0x04	; 4
 942:	40 e0       	ldi	r20, 0x00	; 0
 944:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
					DIO_vwrite('B',1,0);
 948:	82 e4       	ldi	r24, 0x42	; 66
 94a:	61 e0       	ldi	r22, 0x01	; 1
 94c:	40 e0       	ldi	r20, 0x00	; 0
 94e:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
					DIO_vwrite('B',4,0);
 952:	82 e4       	ldi	r24, 0x42	; 66
 954:	64 e0       	ldi	r22, 0x04	; 4
 956:	40 e0       	ldi	r20, 0x00	; 0
 958:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vwrite>
	}
 95c:	08 95       	ret

0000095e <__mulsi3>:
 95e:	62 9f       	mul	r22, r18
 960:	d0 01       	movw	r26, r0
 962:	73 9f       	mul	r23, r19
 964:	f0 01       	movw	r30, r0
 966:	82 9f       	mul	r24, r18
 968:	e0 0d       	add	r30, r0
 96a:	f1 1d       	adc	r31, r1
 96c:	64 9f       	mul	r22, r20
 96e:	e0 0d       	add	r30, r0
 970:	f1 1d       	adc	r31, r1
 972:	92 9f       	mul	r25, r18
 974:	f0 0d       	add	r31, r0
 976:	83 9f       	mul	r24, r19
 978:	f0 0d       	add	r31, r0
 97a:	74 9f       	mul	r23, r20
 97c:	f0 0d       	add	r31, r0
 97e:	65 9f       	mul	r22, r21
 980:	f0 0d       	add	r31, r0
 982:	99 27       	eor	r25, r25
 984:	72 9f       	mul	r23, r18
 986:	b0 0d       	add	r27, r0
 988:	e1 1d       	adc	r30, r1
 98a:	f9 1f       	adc	r31, r25
 98c:	63 9f       	mul	r22, r19
 98e:	b0 0d       	add	r27, r0
 990:	e1 1d       	adc	r30, r1
 992:	f9 1f       	adc	r31, r25
 994:	bd 01       	movw	r22, r26
 996:	cf 01       	movw	r24, r30
 998:	11 24       	eor	r1, r1
 99a:	08 95       	ret

0000099c <__udivmodsi4>:
 99c:	a1 e2       	ldi	r26, 0x21	; 33
 99e:	1a 2e       	mov	r1, r26
 9a0:	aa 1b       	sub	r26, r26
 9a2:	bb 1b       	sub	r27, r27
 9a4:	fd 01       	movw	r30, r26
 9a6:	0d c0       	rjmp	.+26     	; 0x9c2 <__udivmodsi4_ep>

000009a8 <__udivmodsi4_loop>:
 9a8:	aa 1f       	adc	r26, r26
 9aa:	bb 1f       	adc	r27, r27
 9ac:	ee 1f       	adc	r30, r30
 9ae:	ff 1f       	adc	r31, r31
 9b0:	a2 17       	cp	r26, r18
 9b2:	b3 07       	cpc	r27, r19
 9b4:	e4 07       	cpc	r30, r20
 9b6:	f5 07       	cpc	r31, r21
 9b8:	20 f0       	brcs	.+8      	; 0x9c2 <__udivmodsi4_ep>
 9ba:	a2 1b       	sub	r26, r18
 9bc:	b3 0b       	sbc	r27, r19
 9be:	e4 0b       	sbc	r30, r20
 9c0:	f5 0b       	sbc	r31, r21

000009c2 <__udivmodsi4_ep>:
 9c2:	66 1f       	adc	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	1a 94       	dec	r1
 9cc:	69 f7       	brne	.-38     	; 0x9a8 <__udivmodsi4_loop>
 9ce:	60 95       	com	r22
 9d0:	70 95       	com	r23
 9d2:	80 95       	com	r24
 9d4:	90 95       	com	r25
 9d6:	9b 01       	movw	r18, r22
 9d8:	ac 01       	movw	r20, r24
 9da:	bd 01       	movw	r22, r26
 9dc:	cf 01       	movw	r24, r30
 9de:	08 95       	ret

000009e0 <_exit>:
 9e0:	f8 94       	cli

000009e2 <__stop_program>:
 9e2:	ff cf       	rjmp	.-2      	; 0x9e2 <__stop_program>
